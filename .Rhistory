install.packages("pROC")
install.packages("GeMLR")
load("D:/暑研/code/.RData")
?MLMregress
#'
#' @param a the weight of each cluster
#' @param mu the mean of each cluster
#' @param sigma the sigma matrix of each cluster
#' @param beta the logistic coefficients of each cluster
#' @param X all non-dummy feature variables
#' @param Xlogit all feature variables
#'
#' @return P(Y=1|given X) and P(Z=c cluster|given X)
#' @export
MLMclassify <- function(a, mu, sigma, beta, X, Xlogit) {
numdata <- nrow(X)
dim <- ncol(X)
dimlogit <- ncol(Xlogit)
numcmp <- length(a)
sigmainv <- array(0, dim = c(dim, dim, numcmp))
sigmadetsqrt <- numeric(numcmp)
for (j in 1:numcmp) {
sigmainv[,,j] <- solve(sigma[,,j])
sigmadetsqrt[j] <- sqrt(det(sigma[,,j]))
}
pij <- matrix(0, nrow = numdata, ncol = numcmp)
pyij <- matrix(0, nrow = numdata, ncol = numcmp)
pyi <- numeric(numdata)
for (i in 1:numdata) {
tmp <- 0.0
for (j in 1:numcmp) {
pij[i, j] <- a[j] / sigmadetsqrt[j] * exp(-0.5 * t(as.numeric(X[i,] - mu[,j])) %*% sigmainv[,,j] %*% as.numeric(X[i,] - mu[,j]))
if (pij[i, j] >= 0) {
tmp <- tmp + pij[i, j]
} else {
warning(sprintf('Numerical error when computing pij: pij(%d, %d)=%f', i, j, pij[i, j]))
warning(sprintf('sigmadetsqrt(%d)=%f', j, sigmadetsqrt[j]))
print(sprintf('Data point %d:', i))
print(X[i,])
stop('MLMclassify: Joint density of X and the component should be nonnegative')
}
}
for (j in 1:numcmp) {
if (tmp > 0) {
pij[i, j] <- pij[i, j] / tmp
} else {
pij[i, j] <- 1 / numcmp
}
}
for (j in 1:numcmp) {
v1 <- exp(sum(Xlogit[i,] * beta[2:(dimlogit+1), j]) + beta[1, j])
if (v1 > 1.0e+10) {
pyij[i, j] <- 1
} else {
pyij[i, j] <- v1 / (1.0 + v1)
}
}
pyi[i] <- sum(pij[i,] * pyij[i,])
}
return(list(pyi = pyi, pij = pij))
}
?class
a = "我是yb”
"
a
a = c('1','2','3')
b = c(1,2,3)
as.logical(1==2)
as.numeric(1==2)
as.vector(1,2,3)
seq(1，10，2)
seq(1,10,2)
?rep
rep(c(1,2,3),2)
rep(c(1,2),2)
rep(c(1,2),3)
seq(from=2)
seq(to=3)
seq(from=2)
?seq
rep(1,3)
class(rep(1,3))
as.vector(rep(1,3))
is.vector(rep(1,3))
?req
?rep
rep(1:4,2)
rep(1:4,each=2)
c(1,1,1)+c(1,2,3,4,5,6)
c(1,2,3)+rep(1,6)
is.vector(seq(1,10,3))
sample(1:100,1)
sample(1:100,1)
sample(1:100,1)
sample(1:100,1)
sample(1:100,1)
sample(1:100,1)
sample(1:100,1)
sample(1:100,1)
sample(1:100,1)
sample(1:100,1)
sample(1:100,1)
sample(1:100,1)
sample(1:100,1)
sample(1:100,1)
sample(1:100,1)
sample(1:100,1)
sample(1:100,1)
sample(1:100,1)
sample(1:100,1)
sample(1:100,1)
sample(1:100,1)
sample(1:100,1)
sample(1:100,1)
sample(1:100,1)
sample(1:100,1)
sample(1:100,1)
sample(1:100,1)
sample(1:100,1)
sample(1:100,1)
rnorm(1000)
x = rnorm(1000,mean=0,sd=1)
hist(x)
hist(x,col = 'green')
hist(x,col = 'yellow')
hist(x,col = 'pink')
hist(x,col = 'rainbow(11')
hist(x,col = 'rainbow(11)')
hist(x,col = rainbow(13))
hist(x,col = heat.colors(13))
a = seq(1,10,1)
a
a[c(-1,1)]
a[c(-1,1)]
a[-1]
a[-2]
a[c(-1,-2)]
a[-1.5]
which(a==10)
which(a==12)
